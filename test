
import netty.swing.User;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.*;
import java.util.List;

/**
 * Created by zhang on 15-1-12.
 */
public class test extends JFrame{
    JTextArea theArea = null;
    private List<String> listOfIps=new ArrayList<String>();
    public test(){
        super("JMenu1");
        listOfIps=getListOfIps();
        theArea = new JTextArea();
        theArea.setEditable(false);
        getContentPane().add(new JScrollPane(theArea));
        JMenuBar MBar = new JMenuBar();
        // 调用自行编写的buildFileMenu()方法来构造JMenu.
        JMenu mfile = buildFileMenu();

        MBar.add(mfile); // 将JMenu加入JMenuBar中.
        setJMenuBar(MBar);// 将JMenuBar设置到窗口中.

        final JTree tree =jTree();//JTree内容
        add(tree);//JTree加入到窗口中




    }
    public List<String> getListOfIps(){
            List<String> listOfIpsw=new ArrayList<String>();
            File file = new File("E:\\aaa.txt");
            if(!file.exists()){
                file.mkdir();
        }
        BufferedReader reader=null;
        try {

            InputStreamReader isr = new InputStreamReader(new FileInputStream(file),"UTF-8");
             reader = new BufferedReader(isr);
            String tempString = null;

            while ((tempString = reader.readLine()) != null) {
               System.out.println(tempString);
                listOfIpsw.add(tempString);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e1) {
                }
            }
        }
        return listOfIpsw;

        }
    public JMenu buildFileMenu() {


        JMenu thefile = new JMenu("File");
        thefile.add("1");
        thefile.add("退出").addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        // thefile.setIcon(new ImageIcon("icons/file.gif"));
        return thefile;
    }// end of buildFileMenu()


    public JTree jTree(){
        Iterator<String> iterator=listOfIps.iterator();

        DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("软件部");
        while (iterator.hasNext()){
            node1.add(new DefaultMutableTreeNode(new User(iterator.next())));
        }
        //node1.add(new DefaultMutableTreeNode(new User("小花")));
       // node1.add(new DefaultMutableTreeNode(new User("小虎")));
      //  node1.add(new DefaultMutableTreeNode(new User("小龙")));

        DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("销售部");
        node2.add(new DefaultMutableTreeNode(new User("小叶")));
        node2.add(new DefaultMutableTreeNode(new User("小雯")));
        node2.add(new DefaultMutableTreeNode(new User("小夏")));

        DefaultMutableTreeNode top = new DefaultMutableTreeNode("IP管理");

       // top.add(new DefaultMutableTreeNode(new User("总经理")));
        top.add(node1);
        top.add(node2);

        final JTree tree = new JTree(top);
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree
                        .getLastSelectedPathComponent();

                if (node == null)
                    return;

                Object object = node.getUserObject();
                if (node.isLeaf()) {
                    User user = (User) object;
                    System.out.println("你选择了：" + user.toString());
                }

            }
        });
        return tree;


    }

    public static void main(String[] args){
        SwingUtil.setLookAndFeel();
        JFrame F = new test();
        F.setSize(600, 600);
        F.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });// end of addWindowListener
        F.setVisible(true);
    } // end of main
}
class SwingUtil {
    public static final void setLookAndFeel() {

        Font font = new Font("JFrame", Font.PLAIN, 12);
        try {
            UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e) {
            System.out.println ("无法设置界面风格");
        }
         /*   Enumeration keys = UIManager.getLookAndFeelDefaults().keys();


            while (keys.hasMoreElements()) {
                Object key = keys.nextElement();
                if (UIManager.get(key) instanceof Font) {
                    UIManager.put(key, font);
                }
            }*/


    }
}
